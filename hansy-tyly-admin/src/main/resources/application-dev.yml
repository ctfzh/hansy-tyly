 # 开发环境(dev)

server:
  port: 6010
  contextPath: /
  tomcat:
      protocol-header: x-forwarded-proto
      remote-ip-header: x-forwarded-for

spring:
  # 数据库连接
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
#    url: jdbc:mysql://192.168.0.199:3306/TYSCM?useUnicode=true&characterEncoding=utf8
#    username: root
#    password: 123456
    url: jdbc:mysql://rds7349m0p48u5q9182j.mysql.rds.aliyuncs.com/TYSCM?useUnicode=true&characterEncoding=utf8
    username: tyscm
    password: Tyscm123
  redis:
    # （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。
    # max-redirects:
    # （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。
    # cluster.nodes:
    # 连接工厂使用的数据库索引。
    database: 0
    # 连接URL，将覆盖主机，端口和密码（用户将被忽略），例如：redis://user:password@example.com:6379
#    url:
    # Redis服务器主机。
    host: localhost
    # 登录redis服务器的密码。
    password:
    # 启用SSL支持。
    ssl: false
    # 池在给定时间可以分配的最大连接数。使用负值无限制。
    pool:
      max-active: 8
    # 池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
      max-idle: 8
    # 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。
      max-wait: -1
    # 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。
      min-idle: 0
    # Redis服务器端口。
    port: 6379
    # （哨兵模式，不使用则不用开启）。
    # sentinel:
    # （哨兵模式，不使用则不用开启）Redis服务器的名称。
    #   master:
    # （哨兵模式，不使用则不用开启）主机：端口对的逗号分隔列表。
    #   nodes:
    # 以毫秒为单位的连接超时。
    timeout: 0
oss:
  endpoint: http://oss-cn-shenzhen.aliyuncs.com
  accessKeyId: LTAIfjOky9LVcF0Q
  accessKeySecret: yQAVwnGcdS7zWAV2rNOeif3lo32mTa
  bucketName: watchdogdev